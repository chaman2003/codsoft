{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "738723f0-25ec-4b6d-aa92-cbcf4e0ea96a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function to print the Tic-Tac-Toe board\n",
    "def print_board(board):\n",
    "    for row in board:\n",
    "        print(\" | \".join(row))  # Print each row with \"|\" separator\n",
    "        print(\"-\" * 9)  # Print horizontal line after each row\n",
    "\n",
    "# Function to get a list of empty cells on the board\n",
    "def get_empty_cells(board):\n",
    "    def get_empty_cells(board):\n",
    "    \"\"\"Get a list of empty cells on the board.\"\"\"\n",
    "    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == '_']\n",
    "\n",
    "def check_winner(board):\n",
    "    \"\"\"Check if there's a winner on the board.\"\"\"\n",
    "    for line in get_all_lines(board):\n",
    "        if line[0] == line[1] == line[2] and line[0] != '_':\n",
    "            return line[0]\n",
    "    return None\n",
    "\n",
    "def get_all_lines(board):\n",
    "    \"\"\"Get all rows, columns, and diagonals on the board.\"\"\"\n",
    "    lines = []\n",
    "    lines.extend(board)\n",
    "    for j in range(3):\n",
    "        lines.append([board[i][j] for i in range(3)])\n",
    "    lines.append([board[i][i] for i in range(3)])\n",
    "    lines.append([board[i][2 - i] for i in range(3)])\n",
    "    return lines\n",
    "\n",
    "def player_move(board, name):\n",
    "    \"\"\"Function for the player to make a move.\"\"\"\n",
    "    move_row = input(\"Enter your move (row): \")\n",
    "    move_col = input(\"Enter your move (column): \")\n",
    "    try:\n",
    "        row, col = int(move_row) - 1, int(move_col) - 1\n",
    "        if not (0 <= row <= 2 and 0 <= col <= 2):\n",
    "            raise ValueError(\"Row and column indices must be between 1 and 3.\")\n",
    "        if board[row][col] != '_':\n",
    "            raise ValueError(\"That cell is already taken. Try again.\")\n",
    "        board[row][col] = 'O'\n",
    "        print_board(board)\n",
    "        return row, col\n",
    "    except ValueError as e:\n",
    "        print(e)\n",
    "        return player_move(board, name)\n",
    "\n",
    "def ai_move(board):\n",
    "    \"\"\"Function for the AI to make a move.\"\"\"\n",
    "    best_score = float('-inf')\n",
    "    best_move = None\n",
    "    for move in get_empty_cells(board):\n",
    "        board[move[0]][move[1]] = 'X'\n",
    "        score = minimax(board, False)\n",
    "        board[move[0]][move[1]] = '_'\n",
    "        if score > best_score:\n",
    "            best_score = score\n",
    "            best_move = move\n",
    "    board[best_move[0]][best_move[1]] = 'X'\n",
    "    print(\"AI's move:\")\n",
    "    print_board(board)\n",
    "\n",
    "def minimax(board, is_maximizing):\n",
    "    \"\"\"Implement the minimax algorithm.\"\"\"\n",
    "    winner = check_winner(board)\n",
    "    if winner == 'X':\n",
    "        return 1\n",
    "    elif winner == 'O':\n",
    "        return -1\n",
    "    elif '_' not in [cell for row in board for cell in row]:\n",
    "        return 0\n",
    "    \n",
    "    if is_maximizing:\n",
    "        best_score = float('-inf')\n",
    "        for move in get_empty_cells(board):\n",
    "            board[move[0]][move[1]] = 'X'\n",
    "            score = minimax(board, False)\n",
    "            board[move[0]][move[1]] = '_'\n",
    "            best_score = max(score, best_score)\n",
    "        return best_score\n",
    "    else:\n",
    "        best_score = float('inf')\n",
    "        for move in get_empty_cells(board):\n",
    "            board[move[0]][move[1]] = 'O'\n",
    "            score = minimax(board, True)\n",
    "            board[move[0]][move[1]] = '_'\n",
    "            best_score = min(score, best_score)\n",
    "        return best_score\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main function to start the game.\"\"\"\n",
    "    print(\"Welcome to Tic-Tac-Toe!\")\n",
    "    name = input(\"Enter your name: \")\n",
    "    print(\"Welcome, \" + name + \"! Type 'exit' to quit.\")\n",
    "\n",
    "    board = [['_'] * 3 for _ in range(3)]\n",
    "    print_board(board)\n",
    "\n",
    "    while True:\n",
    "        player_row, player_col = player_move(board, name)\n",
    "        winner = check_winner(board)\n",
    "        if winner:\n",
    "            if winner == 'O':\n",
    "                print(name + \" wins!\")\n",
    "            elif winner == 'X':\n",
    "                print(\"AI wins!\")\n",
    "            else:\n",
    "                print(\"It's a draw!\")\n",
    "            break\n",
    "        if '_' not in [cell for row in board for cell in row]:\n",
    "            print(\"It's a draw!\")\n",
    "            break\n",
    "        ai_move(board)\n",
    "        winner = check_winner(board)\n",
    "        if winner:\n",
    "            if winner == 'O':\n",
    "                print(name + \" wins!\")\n",
    "            elif winner == 'X':\n",
    "                print(\"AI wins!\")\n",
    "            else:\n",
    "                print(\"It's a draw!\")\n",
    "            break\n",
    "        if '_' not in [cell for row in board for cell in row]:\n",
    "            print(\"It's a draw!\")\n",
    "            break\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12621aaf-fb0c-47db-afc4-9e67aefff09b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
